%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
% Program Name: DRPnet Particle Picking
%
%  Filename: TrainClassificationNet.m
%
%  Description: Train the classification netowrk (CNN-2)
%
%  Author: Nguyen Phuoc Nguyen
%
%  Copyright (C) 2018-2019. 
%       Nguyen Phuoc Nguyen, Ilker Ersoy, Filiz Bunyak, 
%       Tommi A. White, and Curators of the
%       University of Missouri, a public corporation.
%       All Rights Reserved.
%
%  Created by:
%     Nguyen Phuoc Nguyen, Ilker Ersoy, Filiz Bunyak, Tommi A. White
%     Dept. of Biochemistry & Electron Microscopy Core
%     and Dept. of Electrical Engineering and Computer Science,
%     University of Missouri-Columbia.
%
%  For more information, contact:
%     Dr. Tommi A. White
%     W117 Veterinary Medicine Building
%     University of Missouri, Columbia
%     Columbia, MO 65211
%     (573) 882-8304
%     whiteto@missouri.edu
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%function net2 = TrainClassificationNet(X, Y, num_epochs)
%function net2 = TrainClassificationNet(trainX, trainY, valX, valY, num_epochs)
function net2 = TrainClassificationNet(X_train, X_valid, Y_train, Y_valid, num_epochs)

% Check System Requirements
% Get GPU device information
deviceInfo = gpuDevice;

% Check the GPU compute capability
computeCapability = str2double(deviceInfo.ComputeCapability);
assert(computeCapability > 3.0, 'This example requires a GPU device with compute capability 3.0 or higher.')

%% Data
%num_class = size(unique([trainY; valY]), 1);
%num_samples = size([trainY; valY], 1);
num_class = size(unique([trainY; valY]), 1);
%ratio = [0.9, 0.1, 0];


batch_size = 8;
learning_rate = 0.00005;

train_iter = floor(num_samples * ratio(1) / batch_size);

imageSize = [64 64 1];
%imageSize = [rbox_scale*2 rbox_scale*2 1];

%X_resize = imresize(X, imageSize(1:2));
%clear X;
trainX_resize = imresize(trainX, imageSize(1:2));
valX_resize = imresize(valX, imageSize(1:2));

%[X_train, X_valid, X_test, Y_train, Y_valid, Y_test] = SplitTrainValidTest(X_resize, Y, ratio);
X_train = trainX_resize;
X_valid = valX_resize;
Y_train = trainY;
Y_valid = valY;

%% Define network
layers = [
    imageInputLayer(imageSize)
    
    convolution2dLayer(11, 16,'Padding', 'same')
    batchNormalizationLayer
    reluLayer
    maxPooling2dLayer(4, 'Stride', 1)
    
    convolution2dLayer(7, 16,'Padding', 'same')
    batchNormalizationLayer
    reluLayer
    maxPooling2dLayer(4,'Stride', 1)
    
    convolution2dLayer(5, 32,'Padding', 'same')
    batchNormalizationLayer
    reluLayer
    maxPooling2dLayer(2,'Stride', 1)
    
    convolution2dLayer(3, 64,'Padding', 'same')
    batchNormalizationLayer
    reluLayer
    maxPooling2dLayer(2,'Stride', 1)
    
    dropoutLayer(0.5)
    
    fullyConnectedLayer(128)
    reluLayer
    
    fullyConnectedLayer(num_class)
    softmaxLayer
    classificationLayer];


%% Training Options
options = trainingOptions('adam', ...
    'MaxEpochs', num_epochs, ...
    'ValidationData', {X_valid, Y_valid}, ...
    'ValidationFrequency', train_iter, ...
    'Verbose', false, ...
    'ExecutionEnvironment','gpu', ...
    'MiniBatchSize', batch_size, ...
    'InitialLearnRate', learning_rate, ...
    'Plots', 'training-progress');
%% Train network
net2 = trainNetwork(X_train, Y_train, layers, options);


end